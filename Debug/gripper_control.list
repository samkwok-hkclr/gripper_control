
gripper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004868  08004868  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004868  08004868  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000014  08004884  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004884  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1e9  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002201  00000000  00000000  0002b269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e6  00000000  00000000  0002e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185e5  00000000  00000000  0002eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f564  00000000  00000000  000470f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a873  00000000  00000000  00056657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f4  00000000  00000000  000e0ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e43c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08004828 	.word	0x08004828

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08004828 	.word	0x08004828

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|Left_Direction_Pin|Right_Direction_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <MX_GPIO_Init+0xe0>)
 8000770:	f001 fb2d 	bl	8001dce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|Left_Direction_Pin|Right_Direction_Pin;
 8000774:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0xe0>)
 800078e:	f001 f983 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Forward_Right_Pin|Through_Sensor_Pin;
 8000792:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xe4>)
 80007a8:	f001 f976 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Forward_Left_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Forward_Left_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0xe4>)
 80007c2:	f001 f969 	bl	8001a98 <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40011000 	.word	0x40011000
 80007d8:	40010c00 	.word	0x40010c00

080007dc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <MX_IWDG_Init+0x30>)
 80007e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80007f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007f6:	f001 fb1b 	bl	8001e30 <HAL_IWDG_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000800:	f000 fbae 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000030 	.word	0x20000030
 800080c:	40003000 	.word	0x40003000

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fefc 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f832 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff ff6a 	bl	80006f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000820:	f000 fe52 	bl	80014c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000824:	f000 fc2a 	bl	800107c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000828:	f000 fca8 	bl	800117c <MX_TIM3_Init>
  MX_TIM4_Init();
 800082c:	f000 fd22 	bl	8001274 <MX_TIM4_Init>
  MX_IWDG_Init();
 8000830:	f7ff ffd4 	bl	80007dc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <main+0x5c>)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <main+0x60>)
 800083a:	f003 fb70 	bl	8003f1e <HAL_UART_Receive_IT>

  set_duty_cycle(FULL_DUTY_CYCLE, FULL_DUTY_CYCLE);
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	2264      	movs	r2, #100	; 0x64
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f88f 	bl	8000968 <set_duty_cycle>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_3);
 800084a:	2108      	movs	r1, #8
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <main+0x64>)
 800084e:	f002 f883 	bl	8002958 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  running++;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <main+0x68>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <main+0x68>)
 800085a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(800);
 800085c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000860:	f000 ff38 	bl	80016d4 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x6c>)
 8000866:	f001 fb25 	bl	8001eb4 <HAL_IWDG_Refresh>
	  running++;
 800086a:	e7f2      	b.n	8000852 <main+0x42>
 800086c:	20000060 	.word	0x20000060
 8000870:	2000013c 	.word	0x2000013c
 8000874:	20000064 	.word	0x20000064
 8000878:	2000003c 	.word	0x2000003c
 800087c:	20000030 	.word	0x20000030

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b090      	sub	sp, #64	; 0x40
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2228      	movs	r2, #40	; 0x28
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 ff9e 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008a2:	2309      	movs	r3, #9
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fb01 	bl	8001ed4 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fb42 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fd6e 	bl	80023d8 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000902:	f000 fb2d 	bl	8000f60 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3740      	adds	r7, #64	; 0x40
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <calc_duty_cycle>:

/* USER CODE BEGIN 4 */

inline uint16_t calc_duty_cycle(const uint16_t x)
{
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	80fb      	strh	r3, [r7, #6]
	// if x > diff_max, then y = DUTY_CYCLE_UPPER_BOUND
	// if x < 0, then y = DUTY_CYCLE_LOWER_BOUND
	// y = (D_upper - D_lower) / diff_max * x + DUTY_CYCLE_UPPER_BOUND

	if (x > MAX_DIFF)
 8000918:	220a      	movs	r2, #10
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	4293      	cmp	r3, r2
 800091e:	d901      	bls.n	8000924 <calc_duty_cycle+0x16>
		return DUTY_CYCLE_UPPER_BOUND;
 8000920:	2337      	movs	r3, #55	; 0x37
 8000922:	e01b      	b.n	800095c <calc_duty_cycle+0x4e>
	else if (x < 0)
		return DUTY_CYCLE_LOWER_BOUND;

	uint16_t y = (DUTY_CYCLE_UPPER_BOUND - DUTY_CYCLE_LOWER_BOUND) / MAX_DIFF * x + DUTY_CYCLE_LOWER_BOUND;
 8000924:	2337      	movs	r3, #55	; 0x37
 8000926:	461a      	mov	r2, r3
 8000928:	2355      	movs	r3, #85	; 0x55
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	220a      	movs	r2, #10
 800092e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000932:	b29b      	uxth	r3, r3
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	b29b      	uxth	r3, r3
 800093c:	2255      	movs	r2, #85	; 0x55
 800093e:	4413      	add	r3, r2
 8000940:	81fb      	strh	r3, [r7, #14]

	if (y > DUTY_CYCLE_LOWER_BOUND)
 8000942:	2255      	movs	r2, #85	; 0x55
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	4293      	cmp	r3, r2
 8000948:	d901      	bls.n	800094e <calc_duty_cycle+0x40>
		return DUTY_CYCLE_LOWER_BOUND;
 800094a:	2355      	movs	r3, #85	; 0x55
 800094c:	e006      	b.n	800095c <calc_duty_cycle+0x4e>
	else if (y < DUTY_CYCLE_UPPER_BOUND)
 800094e:	2237      	movs	r2, #55	; 0x37
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	4293      	cmp	r3, r2
 8000954:	d201      	bcs.n	800095a <calc_duty_cycle+0x4c>
		return DUTY_CYCLE_UPPER_BOUND;
 8000956:	2337      	movs	r3, #55	; 0x37
 8000958:	e000      	b.n	800095c <calc_duty_cycle+0x4e>

	return y;
 800095a:	89fb      	ldrh	r3, [r7, #14]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
	...

08000968 <set_duty_cycle>:

inline void set_duty_cycle(const uint16_t left_value, const uint16_t right_value)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	80fb      	strh	r3, [r7, #6]
 8000974:	4613      	mov	r3, r2
 8000976:	80bb      	strh	r3, [r7, #4]
	htim2.Instance->CCR1 = left_value;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <set_duty_cycle+0x2c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR3 = right_value;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <set_duty_cycle+0x2c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	88ba      	ldrh	r2, [r7, #4]
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000064 	.word	0x20000064

08000998 <init_values>:

inline void init_values()
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	left_steps_sum = 0;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <init_values+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
	left_steps_diff = 0;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <init_values+0x48>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	801a      	strh	r2, [r3, #0]
	right_steps_sum = 0;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <init_values+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	801a      	strh	r2, [r3, #0]
	right_steps_diff = 0;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <init_values+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	801a      	strh	r2, [r3, #0]
	left_period_cnt = 0;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <init_values+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]
	right_period_cnt = 0;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <init_values+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]
	execution_time_cnt = 0;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <init_values+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]

	left_state = CAP_RISING;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <init_values+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	right_state = CAP_RISING;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <init_values+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000050 	.word	0x20000050
 80009e0:	2000004e 	.word	0x2000004e
 80009e4:	20000054 	.word	0x20000054
 80009e8:	20000052 	.word	0x20000052
 80009ec:	20000056 	.word	0x20000056
 80009f0:	20000058 	.word	0x20000058
 80009f4:	2000005e 	.word	0x2000005e
 80009f8:	20000061 	.word	0x20000061
 80009fc:	20000062 	.word	0x20000062

08000a00 <step2deg>:

inline float step2deg(uint16_t steps)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	return (float) steps / (6000.0f * 9.0f / 68.0f) * 360.0f;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fc53 	bl	80002b8 <__aeabi_ui2f>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4906      	ldr	r1, [pc, #24]	; (8000a30 <step2deg+0x30>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd5a 	bl	80004d0 <__aeabi_fdiv>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4905      	ldr	r1, [pc, #20]	; (8000a34 <step2deg+0x34>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fca1 	bl	8000368 <__aeabi_fmul>
 8000a26:	4603      	mov	r3, r0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	44468788 	.word	0x44468788
 8000a34:	43b40000 	.word	0x43b40000

08000a38 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if (left_enabled && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000a40:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d04c      	beq.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0xaa>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7f1b      	ldrb	r3, [r3, #28]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d148      	bne.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0xaa>
	{
		switch(left_state)
 8000a50:	4b50      	ldr	r3, [pc, #320]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_TIM_IC_CaptureCallback+0x26>
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d01c      	beq.n	8000a96 <HAL_TIM_IC_CaptureCallback+0x5e>
 8000a5c:	e041      	b.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0xaa>
		{
			case CAP_RISING:
				TIM_RESET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2);
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a1a      	ldr	r2, [r3, #32]
 8000a64:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000a6c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000a7c:	621a      	str	r2, [r3, #32]
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6a1a      	ldr	r2, [r3, #32]
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f042 0220 	orr.w	r2, r2, #32
 8000a8c:	621a      	str	r2, [r3, #32]
				left_state = CAP_FALLING;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
				break;
 8000a94:	e025      	b.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0xaa>
			case CAP_FALLING:
				TIM_RESET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2);
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6a1a      	ldr	r2, [r3, #32]
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000aa4:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6a1a      	ldr	r2, [r3, #32]
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000ab4:	621a      	str	r2, [r3, #32]
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a12      	ldr	r2, [r2, #32]
 8000ac0:	621a      	str	r2, [r3, #32]
				left_steps_sum += 1;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000acc:	801a      	strh	r2, [r3, #0]
				left_steps_diff += 1;
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ad8:	801a      	strh	r2, [r3, #0]
				left_state = CAP_RISING;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
				break;
 8000ae0:	bf00      	nop
		}
	}
	if (right_enabled && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d04c      	beq.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x14c>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7f1b      	ldrb	r3, [r3, #28]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d148      	bne.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x14c>
	{
		switch(right_state)
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_TIM_IC_CaptureCallback+0xc8>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d01c      	beq.n	8000b38 <HAL_TIM_IC_CaptureCallback+0x100>
				right_steps_diff += 1;
				right_state = CAP_RISING;
				break;
		}
	}
}
 8000afe:	e041      	b.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x14c>
				TIM_RESET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1);
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a1a      	ldr	r2, [r3, #32]
 8000b06:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 020a 	bic.w	r2, r2, #10
 8000b0e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6a1a      	ldr	r2, [r3, #32]
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 020a 	bic.w	r2, r2, #10
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a1a      	ldr	r2, [r3, #32]
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0202 	orr.w	r2, r2, #2
 8000b2e:	621a      	str	r2, [r3, #32]
				right_state = CAP_FALLING;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
				break;
 8000b36:	e025      	b.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x14c>
				TIM_RESET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1);
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6a1a      	ldr	r2, [r3, #32]
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 020a 	bic.w	r2, r2, #10
 8000b46:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a1a      	ldr	r2, [r3, #32]
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 020a 	bic.w	r2, r2, #10
 8000b56:	621a      	str	r2, [r3, #32]
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a12      	ldr	r2, [r2, #32]
 8000b62:	621a      	str	r2, [r3, #32]
				right_steps_sum += 1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_TIM_IC_CaptureCallback+0x174>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_TIM_IC_CaptureCallback+0x174>)
 8000b6e:	801a      	strh	r2, [r3, #0]
				right_steps_diff += 1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000b7a:	801a      	strh	r2, [r3, #0]
				right_state = CAP_RISING;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
				break;
 8000b82:	bf00      	nop
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000004c 	.word	0x2000004c
 8000b94:	20000061 	.word	0x20000061
 8000b98:	200000ac 	.word	0x200000ac
 8000b9c:	20000050 	.word	0x20000050
 8000ba0:	2000004e 	.word	0x2000004e
 8000ba4:	2000004d 	.word	0x2000004d
 8000ba8:	20000062 	.word	0x20000062
 8000bac:	20000054 	.word	0x20000054
 8000bb0:	20000052 	.word	0x20000052

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if (htim == (&htim4))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a7a      	ldr	r2, [pc, #488]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f040 80ed 	bne.w	8000da0 <HAL_TIM_PeriodElapsedCallback+0x1ec>
	{
		if (execution_time_cnt > 1)
 8000bc6:	4b79      	ldr	r3, [pc, #484]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d976      	bls.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0x108>
		{
//			left_cycle = left_enabled ? calc_duty_cycle(left_steps_diff) : FULL_DUTY_CYCLE;
			left_cycle = left_enabled ? calc_duty_cycle(left_steps_diff) - 3 : FULL_DUTY_CYCLE;
 8000bce:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000bd6:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe97 	bl	800090e <calc_duty_cycle>
 8000be0:	4603      	mov	r3, r0
 8000be2:	3b03      	subs	r3, #3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	e000      	b.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x36>
 8000be8:	2364      	movs	r3, #100	; 0x64
 8000bea:	4a73      	ldr	r2, [pc, #460]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000bec:	8013      	strh	r3, [r2, #0]
			right_cycle = right_enabled ? calc_duty_cycle(right_steps_diff) : FULL_DUTY_CYCLE;
 8000bee:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d007      	beq.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x52>
 8000bf6:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe87 	bl	800090e <calc_duty_cycle>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	e000      	b.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000c06:	2264      	movs	r2, #100	; 0x64
 8000c08:	4b6e      	ldr	r3, [pc, #440]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c0a:	801a      	strh	r2, [r3, #0]
			set_duty_cycle(left_cycle, right_cycle);
 8000c0c:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	4a6c      	ldr	r2, [pc, #432]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c12:	8812      	ldrh	r2, [r2, #0]
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fea6 	bl	8000968 <set_duty_cycle>

			left_enabled = left_steps_diff > MIN_DIFF_PER_CYCLE ||
 8000c1c:	4b65      	ldr	r3, [pc, #404]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	2202      	movs	r2, #2
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d81a      	bhi.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0xa8>
						   TARGET_ANGLE * MARGIN - step2deg(left_steps_sum) > 0.0;
 8000c26:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000c28:	4a68      	ldr	r2, [pc, #416]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fb9b 	bl	8000368 <__aeabi_fmul>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461c      	mov	r4, r3
 8000c36:	4b66      	ldr	r3, [pc, #408]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fee0 	bl	8000a00 <step2deg>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4619      	mov	r1, r3
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fa85 	bl	8000154 <__aeabi_fsub>
 8000c4a:	4603      	mov	r3, r0
			left_enabled = left_steps_diff > MIN_DIFF_PER_CYCLE ||
 8000c4c:	f04f 0100 	mov.w	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fd45 	bl	80006e0 <__aeabi_fcmpgt>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0xae>
 8000c60:	2300      	movs	r3, #0
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c6a:	701a      	strb	r2, [r3, #0]
			right_enabled = right_steps_diff > MIN_DIFF_PER_CYCLE ||
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	2202      	movs	r2, #2
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d81a      	bhi.n	8000cac <HAL_TIM_PeriodElapsedCallback+0xf8>
						   TARGET_ANGLE * MARGIN - step2deg(right_steps_sum) > 0.0;
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000c78:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fb73 	bl	8000368 <__aeabi_fmul>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461c      	mov	r4, r3
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff feb8 	bl	8000a00 <step2deg>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4619      	mov	r1, r3
 8000c94:	4620      	mov	r0, r4
 8000c96:	f7ff fa5d 	bl	8000154 <__aeabi_fsub>
 8000c9a:	4603      	mov	r3, r0
			right_enabled = right_steps_diff > MIN_DIFF_PER_CYCLE ||
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd1d 	bl	80006e0 <__aeabi_fcmpgt>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cba:	701a      	strb	r2, [r3, #0]
		}

		if ((execution_time_cnt > EXECUTION_TIMEOUT) || (!left_enabled && !right_enabled))
 8000cbc:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2231      	movs	r2, #49	; 0x31
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d80d      	bhi.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x12e>
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d059      	beq.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d052      	beq.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x1d4>
		{
			// stop motors
			left_enabled = false;
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
			right_enabled = false;
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
			set_duty_cycle(FULL_DUTY_CYCLE, FULL_DUTY_CYCLE);
 8000cee:	2364      	movs	r3, #100	; 0x64
 8000cf0:	2264      	movs	r2, #100	; 0x64
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe37 	bl	8000968 <set_duty_cycle>

			// stop capture feedback
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000cfe:	f002 f82b 	bl	8002d58 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000d02:	2104      	movs	r1, #4
 8000d04:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d06:	f002 f827 	bl	8002d58 <HAL_TIM_IC_Stop_IT>

			// |   0-1   |   2-3   |   4   |   5   |   6-7   |
			// | l_steps | r_steps |  l/r_mv_flag  | tim_cnt |
			resp[0] = (uint8_t)(left_steps_sum & 0x00FF);
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d12:	701a      	strb	r2, [r3, #0]
			resp[1] = (uint8_t)((left_steps_sum & 0xFF00) >> 8);
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d20:	705a      	strb	r2, [r3, #1]
			resp[2] = (uint8_t)(right_steps_sum & 0x00FF);
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d2a:	709a      	strb	r2, [r3, #2]
			resp[3] = (uint8_t)((right_steps_sum & 0xFF00) >> 8);
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d38:	70da      	strb	r2, [r3, #3]
			resp[4] = (uint8_t)left_steps_diff;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d42:	711a      	strb	r2, [r3, #4]
			resp[5] = (uint8_t)right_steps_diff;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d4c:	715a      	strb	r2, [r3, #5]

			resp[6] = (uint8_t)(execution_time_cnt & 0x00FF);
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d56:	719a      	strb	r2, [r3, #6]
			resp[7] = (uint8_t)((execution_time_cnt & 0xFF00) >> 8);
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d64:	71da      	strb	r2, [r3, #7]

			init_values();
 8000d66:	f7ff fe17 	bl	8000998 <init_values>

			HAL_TIM_Base_Stop_IT(&htim4);
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d6c:	f001 fd6e 	bl	800284c <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart1, (uint8_t*)&resp, 8, 0xFFFF);
 8000d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d74:	2208      	movs	r2, #8
 8000d76:	4919      	ldr	r1, [pc, #100]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d78:	4819      	ldr	r0, [pc, #100]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d7a:	f003 f83e 	bl	8003dfa <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d84:	f003 f8cb 	bl	8003f1e <HAL_UART_Receive_IT>
		}

		execution_time_cnt += 1;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d92:	801a      	strh	r2, [r3, #0]

		left_steps_diff = 0;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	801a      	strh	r2, [r3, #0]
		right_steps_diff = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
	}
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	200000f4 	.word	0x200000f4
 8000dac:	2000005e 	.word	0x2000005e
 8000db0:	2000004c 	.word	0x2000004c
 8000db4:	2000004e 	.word	0x2000004e
 8000db8:	2000005a 	.word	0x2000005a
 8000dbc:	2000004d 	.word	0x2000004d
 8000dc0:	20000052 	.word	0x20000052
 8000dc4:	2000005c 	.word	0x2000005c
 8000dc8:	42b40000 	.word	0x42b40000
 8000dcc:	3f866666 	.word	0x3f866666
 8000dd0:	20000050 	.word	0x20000050
 8000dd4:	20000054 	.word	0x20000054
 8000dd8:	200000ac 	.word	0x200000ac
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	20000060 	.word	0x20000060

08000de8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4850      	ldr	r0, [pc, #320]	; (8000f38 <HAL_UART_RxCpltCallback+0x150>)
 8000df6:	f001 f802 	bl	8001dfe <HAL_GPIO_TogglePin>

	if (uart_recv == 0)
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10b      	bne.n	8000e1a <HAL_UART_RxCpltCallback+0x32>
	{
		set_duty_cycle(FULL_DUTY_CYCLE, FULL_DUTY_CYCLE);
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	2264      	movs	r2, #100	; 0x64
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fdad 	bl	8000968 <set_duty_cycle>
		HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	494a      	ldr	r1, [pc, #296]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000e12:	484b      	ldr	r0, [pc, #300]	; (8000f40 <HAL_UART_RxCpltCallback+0x158>)
 8000e14:	f003 f883 	bl	8003f1e <HAL_UART_Receive_IT>
	{
		//enable receive interrupt for next serial input
		HAL_UART_Transmit(&huart1, (uint8_t*) &wrong_command, 8, 100); // 0xFFFF
		HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
	}
}
 8000e18:	e08a      	b.n	8000f30 <HAL_UART_RxCpltCallback+0x148>
	else if (uart_recv == 1) //make finger vertical
 8000e1a:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d125      	bne.n	8000e6e <HAL_UART_RxCpltCallback+0x86>
		init_values();
 8000e22:	f7ff fdb9 	bl	8000998 <init_values>
		HAL_GPIO_WritePin(Left_Direction_GPIO_Port, Left_Direction_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2c:	4842      	ldr	r0, [pc, #264]	; (8000f38 <HAL_UART_RxCpltCallback+0x150>)
 8000e2e:	f000 ffce 	bl	8001dce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Right_Direction_GPIO_Port, Right_Direction_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e38:	483f      	ldr	r0, [pc, #252]	; (8000f38 <HAL_UART_RxCpltCallback+0x150>)
 8000e3a:	f000 ffc8 	bl	8001dce <HAL_GPIO_WritePin>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4840      	ldr	r0, [pc, #256]	; (8000f44 <HAL_UART_RxCpltCallback+0x15c>)
 8000e42:	f001 fe83 	bl	8002b4c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e46:	2104      	movs	r1, #4
 8000e48:	483e      	ldr	r0, [pc, #248]	; (8000f44 <HAL_UART_RxCpltCallback+0x15c>)
 8000e4a:	f001 fe7f 	bl	8002b4c <HAL_TIM_IC_Start_IT>
		left_enabled = true;
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_UART_RxCpltCallback+0x160>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
		right_enabled = true;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_UART_RxCpltCallback+0x164>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
		set_duty_cycle(DUTY_CYCLE_UPPER_BOUND, DUTY_CYCLE_UPPER_BOUND);
 8000e5a:	2337      	movs	r3, #55	; 0x37
 8000e5c:	2237      	movs	r2, #55	; 0x37
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fd81 	bl	8000968 <set_duty_cycle>
		HAL_TIM_Base_Start_IT(&htim4);
 8000e66:	483a      	ldr	r0, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0x168>)
 8000e68:	f001 fc9e 	bl	80027a8 <HAL_TIM_Base_Start_IT>
}
 8000e6c:	e060      	b.n	8000f30 <HAL_UART_RxCpltCallback+0x148>
	else if (uart_recv == 2) //make finger horizon
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d125      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xda>
		init_values();
 8000e76:	f7ff fd8f 	bl	8000998 <init_values>
		HAL_GPIO_WritePin(Left_Direction_GPIO_Port, Left_Direction_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	482d      	ldr	r0, [pc, #180]	; (8000f38 <HAL_UART_RxCpltCallback+0x150>)
 8000e82:	f000 ffa4 	bl	8001dce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Right_Direction_GPIO_Port, Right_Direction_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	482a      	ldr	r0, [pc, #168]	; (8000f38 <HAL_UART_RxCpltCallback+0x150>)
 8000e8e:	f000 ff9e 	bl	8001dce <HAL_GPIO_WritePin>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e92:	2100      	movs	r1, #0
 8000e94:	482b      	ldr	r0, [pc, #172]	; (8000f44 <HAL_UART_RxCpltCallback+0x15c>)
 8000e96:	f001 fe59 	bl	8002b4c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4829      	ldr	r0, [pc, #164]	; (8000f44 <HAL_UART_RxCpltCallback+0x15c>)
 8000e9e:	f001 fe55 	bl	8002b4c <HAL_TIM_IC_Start_IT>
		left_enabled = true;
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_UART_RxCpltCallback+0x160>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
		right_enabled = true;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <HAL_UART_RxCpltCallback+0x164>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
		set_duty_cycle(DUTY_CYCLE_UPPER_BOUND, DUTY_CYCLE_UPPER_BOUND);
 8000eae:	2337      	movs	r3, #55	; 0x37
 8000eb0:	2237      	movs	r2, #55	; 0x37
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd57 	bl	8000968 <set_duty_cycle>
		HAL_TIM_Base_Start_IT(&htim4);
 8000eba:	4825      	ldr	r0, [pc, #148]	; (8000f50 <HAL_UART_RxCpltCallback+0x168>)
 8000ebc:	f001 fc74 	bl	80027a8 <HAL_TIM_Base_Start_IT>
}
 8000ec0:	e036      	b.n	8000f30 <HAL_UART_RxCpltCallback+0x148>
	else if (uart_recv == 3) //read sensors info
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d127      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x132>
		sensor_states[0]= (uint8_t)HAL_GPIO_ReadPin(Through_Sensor_GPIO_Port, Through_Sensor_Pin);
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	4821      	ldr	r0, [pc, #132]	; (8000f54 <HAL_UART_RxCpltCallback+0x16c>)
 8000ed0:	f000 ff66 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_UART_RxCpltCallback+0x170>)
 8000eda:	701a      	strb	r2, [r3, #0]
		sensor_states[1]= (uint8_t)HAL_GPIO_ReadPin(Forward_Left_GPIO_Port, Forward_Left_Pin);
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	481c      	ldr	r0, [pc, #112]	; (8000f54 <HAL_UART_RxCpltCallback+0x16c>)
 8000ee2:	f000 ff5d 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_UART_RxCpltCallback+0x170>)
 8000eec:	705a      	strb	r2, [r3, #1]
		sensor_states[2]= (uint8_t)HAL_GPIO_ReadPin(Forward_Right_GPIO_Port, Forward_Right_Pin);
 8000eee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <HAL_UART_RxCpltCallback+0x16c>)
 8000ef4:	f000 ff54 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_UART_RxCpltCallback+0x170>)
 8000efe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, sensor_states, 3, 0xFFFF);
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	2203      	movs	r2, #3
 8000f06:	4914      	ldr	r1, [pc, #80]	; (8000f58 <HAL_UART_RxCpltCallback+0x170>)
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <HAL_UART_RxCpltCallback+0x158>)
 8000f0a:	f002 ff76 	bl	8003dfa <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	490a      	ldr	r1, [pc, #40]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_UART_RxCpltCallback+0x158>)
 8000f14:	f003 f803 	bl	8003f1e <HAL_UART_Receive_IT>
}
 8000f18:	e00a      	b.n	8000f30 <HAL_UART_RxCpltCallback+0x148>
		HAL_UART_Transmit(&huart1, (uint8_t*) &wrong_command, 8, 100); // 0xFFFF
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	490f      	ldr	r1, [pc, #60]	; (8000f5c <HAL_UART_RxCpltCallback+0x174>)
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <HAL_UART_RxCpltCallback+0x158>)
 8000f22:	f002 ff6a 	bl	8003dfa <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <HAL_UART_RxCpltCallback+0x154>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_RxCpltCallback+0x158>)
 8000f2c:	f002 fff7 	bl	8003f1e <HAL_UART_Receive_IT>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	20000060 	.word	0x20000060
 8000f40:	2000013c 	.word	0x2000013c
 8000f44:	200000ac 	.word	0x200000ac
 8000f48:	2000004c 	.word	0x2000004c
 8000f4c:	2000004d 	.word	0x2000004d
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	20000040 	.word	0x20000040
 8000f5c:	20000044 	.word	0x20000044

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_MspInit+0x60>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_MspInit+0x60>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001016:	f000 fb41 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f001 ff3f 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000064 	.word	0x20000064

08001034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM3_IRQHandler+0x10>)
 800103a:	f001 ff35 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000ac 	.word	0x200000ac

08001048 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM4_IRQHandler+0x10>)
 800104e:	f001 ff2b 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000f4 	.word	0x200000f4

0800105c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <USART1_IRQHandler+0x10>)
 8001062:	f002 ff8d 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000013c 	.word	0x2000013c

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010b6:	2223      	movs	r2, #35	; 0x23
 80010b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010c2:	2263      	movs	r2, #99	; 0x63
 80010c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010d4:	f001 fb18 	bl	8002708 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010de:	f7ff ff3f 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010f0:	f002 f934 	bl	800335c <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010fa:	f7ff ff31 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <MX_TIM2_Init+0xfc>)
 8001100:	f001 fbd2 	bl	80028a8 <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800110a:	f7ff ff29 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4619      	mov	r1, r3
 800111c:	4816      	ldr	r0, [pc, #88]	; (8001178 <MX_TIM2_Init+0xfc>)
 800111e:	f002 fdaf 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001128:	f7ff ff1a 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM2_Init+0xfc>)
 8001144:	f002 f84c 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800114e:	f7ff ff07 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2208      	movs	r2, #8
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM2_Init+0xfc>)
 800115a:	f002 f841 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001164:	f7ff fefc 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM2_Init+0xfc>)
 800116a:	f000 f94d 	bl	8001408 <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	; 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000064 	.word	0x20000064

0800117c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <MX_TIM3_Init+0xf0>)
 80011a8:	4a31      	ldr	r2, [pc, #196]	; (8001270 <MX_TIM3_Init+0xf4>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_TIM3_Init+0xf0>)
 80011ae:	2247      	movs	r2, #71	; 0x47
 80011b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MX_TIM3_Init+0xf0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_TIM3_Init+0xf0>)
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <MX_TIM3_Init+0xf0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_TIM3_Init+0xf0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011cc:	4827      	ldr	r0, [pc, #156]	; (800126c <MX_TIM3_Init+0xf0>)
 80011ce:	f001 fa9b 	bl	8002708 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011d8:	f7ff fec2 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <MX_TIM3_Init+0xf0>)
 80011ea:	f002 f8b7 	bl	800335c <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f7ff feb4 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <MX_TIM3_Init+0xf0>)
 80011fa:	f001 fc4f 	bl	8002a9c <HAL_TIM_IC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001204:	f7ff feac 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <MX_TIM3_Init+0xf0>)
 8001218:	f002 fd32 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001222:	f7ff fe9d 	bl	8000f60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800122a:	2301      	movs	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <MX_TIM3_Init+0xf0>)
 800123e:	f001 ff3b 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001248:	f7ff fe8a 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2204      	movs	r2, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM3_Init+0xf0>)
 8001254:	f001 ff30 	bl	80030b8 <HAL_TIM_IC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800125e:	f7ff fe7f 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000ac 	.word	0x200000ac
 8001270:	40000400 	.word	0x40000400

08001274 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM4_Init+0x94>)
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <MX_TIM4_Init+0x98>)
 8001294:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM4_Init+0x94>)
 8001298:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800129c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM4_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM4_Init+0x94>)
 80012a6:	22c7      	movs	r2, #199	; 0xc7
 80012a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_TIM4_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM4_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <MX_TIM4_Init+0x94>)
 80012b8:	f001 fa26 	bl	8002708 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012c2:	f7ff fe4d 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM4_Init+0x94>)
 80012d4:	f002 f842 	bl	800335c <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80012de:	f7ff fe3f 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM4_Init+0x94>)
 80012f0:	f002 fcc6 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80012fa:	f7ff fe31 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000f4 	.word	0x200000f4
 800130c:	40000800 	.word	0x40000800

08001310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132e:	d114      	bne.n	800135a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	61d3      	str	r3, [r2, #28]
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	201c      	movs	r0, #28
 800134e:	f000 fabc 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001352:	201c      	movs	r0, #28
 8001354:	f000 fad5 	bl	8001902 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001358:	e04a      	b.n	80013f0 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_TIM_Base_MspInit+0xec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d12c      	bne.n	80013be <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <HAL_TIM_Base_MspInit+0xf0>)
 80013a8:	f000 fb76 	bl	8001a98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	201d      	movs	r0, #29
 80013b2:	f000 fa8a 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b6:	201d      	movs	r0, #29
 80013b8:	f000 faa3 	bl	8001902 <HAL_NVIC_EnableIRQ>
}
 80013bc:	e018      	b.n	80013f0 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM4)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_TIM_Base_MspInit+0xf4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d113      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	61d3      	str	r3, [r2, #28]
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_TIM_Base_MspInit+0xe8>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	201e      	movs	r0, #30
 80013e6:	f000 fa70 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013ea:	201e      	movs	r0, #30
 80013ec:	f000 fa89 	bl	8001902 <HAL_NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000400 	.word	0x40000400
 8001400:	40010800 	.word	0x40010800
 8001404:	40000800 	.word	0x40000800

08001408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001426:	d142      	bne.n	80014ae <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 800146c:	f000 fb14 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <HAL_TIM_MspPostInit+0xb8>)
 8001486:	f000 fb07 	bl	8001a98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_TIM_MspPostInit+0xbc>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_TIM_MspPostInit+0xbc>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40010000 	.word	0x40010000

080014c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART1_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 8001500:	f002 fc2e 	bl	8003d60 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f7ff fd29 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000013c 	.word	0x2000013c
 8001518:	40013800 	.word	0x40013800

0800151c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d139      	bne.n	80015b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <HAL_UART_MspInit+0xa4>)
 8001582:	f000 fa89 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <HAL_UART_MspInit+0xa4>)
 800159c:	f000 fa7c 	bl	8001a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2025      	movs	r0, #37	; 0x25
 80015a6:	f000 f990 	bl	80018ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015aa:	2025      	movs	r0, #37	; 0x25
 80015ac:	f000 f9a9 	bl	8001902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ea:	f7ff fd41 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f003 f8f7 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff f90d 	bl	8000810 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001600:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8001604:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001608:	20000184 	.word	0x20000184

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f947 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fc9e 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f95f 	bl	800191e <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f927 	bl	80018ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000008 	.word	0x20000008
 8001694:	20000010 	.word	0x20000010
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000180 	.word	0x20000180

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000180 	.word	0x20000180

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fff0 	bl	80016c0 <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffe0 	bl	80016c0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000010 	.word	0x20000010

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4906      	ldr	r1, [pc, #24]	; (80017b4 <__NVIC_EnableIRQ+0x34>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f7ff ff90 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff2d 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018dc:	f7ff ff42 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff ff90 	bl	800180c <NVIC_EncodePriority>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff5f 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff35 	bl	8001780 <__NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffa2 	bl	8001870 <SysTick_Config>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e020      	b.n	80019a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 020e 	bic.w	r2, r2, #14
 800196c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d005      	beq.n	80019ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2204      	movs	r2, #4
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e051      	b.n	8001a72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 020e 	bic.w	r2, r2, #14
 80019dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_DMA_Abort_IT+0xd0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d029      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xa0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_DMA_Abort_IT+0xd4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x9c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_DMA_Abort_IT+0xd8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01a      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x96>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_DMA_Abort_IT+0xdc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x90>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_DMA_Abort_IT+0xe0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00a      	beq.n	8001a36 <HAL_DMA_Abort_IT+0x8a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_DMA_Abort_IT+0xe4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d102      	bne.n	8001a30 <HAL_DMA_Abort_IT+0x84>
 8001a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a2e:	e00e      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a34:	e00b      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3a:	e008      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	e005      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a46:	e002      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a48:	2310      	movs	r3, #16
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_Abort_IT+0xa2>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <HAL_DMA_Abort_IT+0xe8>)
 8001a50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
    } 
  }
  return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40020008 	.word	0x40020008
 8001a80:	4002001c 	.word	0x4002001c
 8001a84:	40020030 	.word	0x40020030
 8001a88:	40020044 	.word	0x40020044
 8001a8c:	40020058 	.word	0x40020058
 8001a90:	4002006c 	.word	0x4002006c
 8001a94:	40020000 	.word	0x40020000

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b08b      	sub	sp, #44	; 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e169      	b.n	8001d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aac:	2201      	movs	r2, #1
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8158 	bne.w	8001d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a9a      	ldr	r2, [pc, #616]	; (8001d38 <HAL_GPIO_Init+0x2a0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d05e      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a98      	ldr	r2, [pc, #608]	; (8001d38 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d875      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001ada:	4a98      	ldr	r2, [pc, #608]	; (8001d3c <HAL_GPIO_Init+0x2a4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d058      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001ae0:	4a96      	ldr	r2, [pc, #600]	; (8001d3c <HAL_GPIO_Init+0x2a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d86f      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001ae6:	4a96      	ldr	r2, [pc, #600]	; (8001d40 <HAL_GPIO_Init+0x2a8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d052      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001aec:	4a94      	ldr	r2, [pc, #592]	; (8001d40 <HAL_GPIO_Init+0x2a8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d869      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001af2:	4a94      	ldr	r2, [pc, #592]	; (8001d44 <HAL_GPIO_Init+0x2ac>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d04c      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001af8:	4a92      	ldr	r2, [pc, #584]	; (8001d44 <HAL_GPIO_Init+0x2ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d863      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001afe:	4a92      	ldr	r2, [pc, #584]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d046      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001b04:	4a90      	ldr	r2, [pc, #576]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d85d      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d82a      	bhi.n	8001b64 <HAL_GPIO_Init+0xcc>
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d859      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_GPIO_Init+0x80>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b6d 	.word	0x08001b6d
 8001b20:	08001b7f 	.word	0x08001b7f
 8001b24:	08001bc1 	.word	0x08001bc1
 8001b28:	08001bc7 	.word	0x08001bc7
 8001b2c:	08001bc7 	.word	0x08001bc7
 8001b30:	08001bc7 	.word	0x08001bc7
 8001b34:	08001bc7 	.word	0x08001bc7
 8001b38:	08001bc7 	.word	0x08001bc7
 8001b3c:	08001bc7 	.word	0x08001bc7
 8001b40:	08001bc7 	.word	0x08001bc7
 8001b44:	08001bc7 	.word	0x08001bc7
 8001b48:	08001bc7 	.word	0x08001bc7
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001bc7 	.word	0x08001bc7
 8001b54:	08001bc7 	.word	0x08001bc7
 8001b58:	08001bc7 	.word	0x08001bc7
 8001b5c:	08001b75 	.word	0x08001b75
 8001b60:	08001b89 	.word	0x08001b89
 8001b64:	4a79      	ldr	r2, [pc, #484]	; (8001d4c <HAL_GPIO_Init+0x2b4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6a:	e02c      	b.n	8001bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e029      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e024      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	3308      	adds	r3, #8
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e01f      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e01a      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e013      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	611a      	str	r2, [r3, #16]
          break;
 8001bb2:	e009      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	615a      	str	r2, [r3, #20]
          break;
 8001bbe:	e003      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          break;
 8001bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d801      	bhi.n	8001bd2 <HAL_GPIO_Init+0x13a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_Init+0x13e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2bff      	cmp	r3, #255	; 0xff
 8001bdc:	d802      	bhi.n	8001be4 <HAL_GPIO_Init+0x14c>
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x152>
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	3b08      	subs	r3, #8
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	6a39      	ldr	r1, [r7, #32]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80b1 	beq.w	8001d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2bc>)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_GPIO_Init+0x2c0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x1ec>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_GPIO_Init+0x2c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1e8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <HAL_GPIO_Init+0x2c8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1e4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <HAL_GPIO_Init+0x2cc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1e0>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c78:	2304      	movs	r3, #4
 8001c7a:	e004      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c84:	2300      	movs	r3, #0
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	f002 0203 	and.w	r2, r2, #3
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c96:	492f      	ldr	r1, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x2bc>)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	492c      	ldr	r1, [pc, #176]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4928      	ldr	r1, [pc, #160]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	491e      	ldr	r1, [pc, #120]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4918      	ldr	r1, [pc, #96]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4914      	ldr	r1, [pc, #80]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d021      	beq.n	8001d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e021      	b.n	8001d7a <HAL_GPIO_Init+0x2e2>
 8001d36:	bf00      	nop
 8001d38:	10320000 	.word	0x10320000
 8001d3c:	10310000 	.word	0x10310000
 8001d40:	10220000 	.word	0x10220000
 8001d44:	10210000 	.word	0x10210000
 8001d48:	10120000 	.word	0x10120000
 8001d4c:	10110000 	.word	0x10110000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40010800 	.word	0x40010800
 8001d5c:	40010c00 	.word	0x40010c00
 8001d60:	40011000 	.word	0x40011000
 8001d64:	40011400 	.word	0x40011400
 8001d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_GPIO_Init+0x304>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4909      	ldr	r1, [pc, #36]	; (8001d9c <HAL_GPIO_Init+0x304>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f47f ae8e 	bne.w	8001aac <HAL_GPIO_Init+0x14>
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	372c      	adds	r7, #44	; 0x2c
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dde:	787b      	ldrb	r3, [r7, #1]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	041a      	lsls	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	611a      	str	r2, [r3, #16]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e10:	887a      	ldrh	r2, [r7, #2]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	400b      	ands	r3, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e034      	b.n	8001eac <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f245 5255 	movw	r2, #21845	; 0x5555
 8001e54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6852      	ldr	r2, [r2, #4]
 8001e5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6892      	ldr	r2, [r2, #8]
 8001e68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001e6a:	f7ff fc29 	bl	80016c0 <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e70:	e00f      	b.n	8001e92 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001e72:	f7ff fc25 	bl	80016c0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b27      	cmp	r3, #39	; 0x27
 8001e7e:	d908      	bls.n	8001e92 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e00c      	b.n	8001eac <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e8      	bne.n	8001e72 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e272      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8087 	beq.w	8002002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d00c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d112      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d10b      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d06c      	beq.n	8002000 <HAL_RCC_OscConfig+0x12c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d168      	bne.n	8002000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e24c      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x76>
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7f      	ldr	r2, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e02e      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0xbc>
 8001f76:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a71      	ldr	r2, [pc, #452]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f90:	4b6b      	ldr	r3, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a6a      	ldr	r2, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fb86 	bl	80016c0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fb82 	bl	80016c0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e200      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xe4>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fb72 	bl	80016c0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fb6e 	bl	80016c0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1ec      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x10c>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201a:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1c0      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4939      	ldr	r1, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fb27 	bl	80016c0 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fb23 	bl	80016c0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1a1      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fb06 	bl	80016c0 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff fb02 	bl	80016c0 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e180      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03a      	beq.n	8002158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d019      	beq.n	800211e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff fae6 	bl	80016c0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff fae2 	bl	80016c0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e160      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f000 fad8 	bl	80026cc <RCC_Delay>
 800211c:	e01c      	b.n	8002158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff facc 	bl	80016c0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	e00f      	b.n	800214c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fac8 	bl	80016c0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d908      	bls.n	800214c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e146      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	42420000 	.word	0x42420000
 8002148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e9      	bne.n	800212c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a6 	beq.w	80022b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a87      	ldr	r2, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7e      	ldr	r2, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fa89 	bl	80016c0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff fa85 	bl	80016c0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e103      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4c8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x312>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e02d      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x334>
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	e01c      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x356>
 8002210:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	4b58      	ldr	r3, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fa39 	bl	80016c0 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff fa35 	bl	80016c0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0b1      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCC_OscConfig+0x37e>
 8002274:	e014      	b.n	80022a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fa23 	bl	80016c0 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff fa1f 	bl	80016c0 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e09b      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d061      	beq.n	800238c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d146      	bne.n	800235e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff f9f3 	bl	80016c0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f9ef 	bl	80016c0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e06d      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4921      	ldr	r1, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a19      	ldr	r1, [r3, #32]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	430b      	orrs	r3, r1
 800232a:	491b      	ldr	r1, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f9c3 	bl	80016c0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff f9bf 	bl	80016c0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x46a>
 800235c:	e035      	b.n	80023ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x4cc>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff f9ac 	bl	80016c0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff f9a8 	bl	80016c0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e026      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x498>
 800238a:	e01e      	b.n	80023ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e019      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x500>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0d0      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d910      	bls.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4965      	ldr	r1, [pc, #404]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b8      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800243e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002456:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	494d      	ldr	r1, [pc, #308]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d040      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e07f      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e073      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06b      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4936      	ldr	r1, [pc, #216]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7ff f8fa 	bl	80016c0 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7ff f8f6 	bl	80016c0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e053      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d210      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 0207 	bic.w	r2, r3, #7
 800250e:	4922      	ldr	r1, [pc, #136]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e032      	b.n	800258e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4916      	ldr	r1, [pc, #88]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002566:	f000 f821 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800256a:	4602      	mov	r2, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	490a      	ldr	r1, [pc, #40]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f858 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40022000 	.word	0x40022000
 800259c:	40021000 	.word	0x40021000
 80025a0:	08004850 	.word	0x08004850
 80025a4:	20000008 	.word	0x20000008
 80025a8:	2000000c 	.word	0x2000000c

080025ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b490      	push	{r4, r7}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_RCC_GetSysClockFreq+0xac>)
 80025b4:	1d3c      	adds	r4, r7, #4
 80025b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025bc:	f240 2301 	movw	r3, #513	; 0x201
 80025c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x40>
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x46>
 80025ea:	e02b      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ee:	623b      	str	r3, [r7, #32]
      break;
 80025f0:	e02b      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3328      	adds	r3, #40	; 0x28
 80025fc:	443b      	add	r3, r7
 80025fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002602:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0c5b      	lsrs	r3, r3, #17
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	3328      	adds	r3, #40	; 0x28
 800261a:	443b      	add	r3, r7
 800261c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002620:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	e004      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	623b      	str	r3, [r7, #32]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002646:	623b      	str	r3, [r7, #32]
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6a3b      	ldr	r3, [r7, #32]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc90      	pop	{r4, r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	08004840 	.word	0x08004840
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	003d0900 	.word	0x003d0900

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <HAL_RCC_GetHCLKFreq+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff2 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08004860 	.word	0x08004860

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffde 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08004860 	.word	0x08004860

080026cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <RCC_Delay+0x34>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <RCC_Delay+0x38>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e8:	bf00      	nop
  }
  while (Delay --);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <RCC_Delay+0x1c>
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000008 	.word	0x20000008
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e041      	b.n	800279e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fdee 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f000 fee8 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d001      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e03a      	b.n	8002836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_TIM_Base_Start_IT+0x98>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d009      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_TIM_Base_Start_IT+0x9c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <HAL_TIM_Base_Start_IT+0xa0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d010      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	e007      	b.n	8002834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	f241 1311 	movw	r3, #4369	; 0x1111
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_Base_Stop_IT+0x48>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	f240 4344 	movw	r3, #1092	; 0x444
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_TIM_Base_Stop_IT+0x48>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f839 	bl	8002946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fe18 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_TIM_PWM_Start+0x24>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e022      	b.n	80029c2 <HAL_TIM_PWM_Start+0x6a>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d109      	bne.n	8002996 <HAL_TIM_PWM_Start+0x3e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e015      	b.n	80029c2 <HAL_TIM_PWM_Start+0x6a>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x58>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e008      	b.n	80029c2 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e05e      	b.n	8002a88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <HAL_TIM_PWM_Start+0x82>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	e013      	b.n	8002a02 <HAL_TIM_PWM_Start+0xaa>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start+0x92>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	e00b      	b.n	8002a02 <HAL_TIM_PWM_Start+0xaa>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0xa2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f8:	e003      	b.n	8002a02 <HAL_TIM_PWM_Start+0xaa>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	6839      	ldr	r1, [r7, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 f913 	bl	8003c36 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_TIM_PWM_Start+0x138>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d107      	bne.n	8002a2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_PWM_Start+0x138>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_PWM_Start+0xfa>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Start+0xfa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_TIM_PWM_Start+0x13c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0xfa>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_TIM_PWM_Start+0x140>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d111      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d010      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	e007      	b.n	8002a86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e041      	b.n	8002b32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f839 	bl	8002b3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 fd1e 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_IC_Start_IT+0x1a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e013      	b.n	8002b8e <HAL_TIM_IC_Start_IT+0x42>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_IC_Start_IT+0x2a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e00b      	b.n	8002b8e <HAL_TIM_IC_Start_IT+0x42>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_IC_Start_IT+0x3a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e003      	b.n	8002b8e <HAL_TIM_IC_Start_IT+0x42>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_TIM_IC_Start_IT+0x54>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e013      	b.n	8002bc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d104      	bne.n	8002bb0 <HAL_TIM_IC_Start_IT+0x64>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e00b      	b.n	8002bc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d104      	bne.n	8002bc0 <HAL_TIM_IC_Start_IT+0x74>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e003      	b.n	8002bc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d001      	beq.n	8002bda <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0b3      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_IC_Start_IT+0x9e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be8:	e013      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0xc6>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_IC_Start_IT+0xae>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf8:	e00b      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0xc6>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_IC_Start_IT+0xbe>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c08:	e003      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0xc6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0xd6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xfe>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_IC_Start_IT+0xe6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xfe>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_IC_Start_IT+0xf6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xfe>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d841      	bhi.n	8002cd4 <HAL_TIM_IC_Start_IT+0x188>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_TIM_IC_Start_IT+0x10c>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c8d 	.word	0x08002c8d
 8002c5c:	08002cd5 	.word	0x08002cd5
 8002c60:	08002cd5 	.word	0x08002cd5
 8002c64:	08002cd5 	.word	0x08002cd5
 8002c68:	08002c9f 	.word	0x08002c9f
 8002c6c:	08002cd5 	.word	0x08002cd5
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002cd5 	.word	0x08002cd5
 8002c78:	08002cb1 	.word	0x08002cb1
 8002c7c:	08002cd5 	.word	0x08002cd5
 8002c80:	08002cd5 	.word	0x08002cd5
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002cc3 	.word	0x08002cc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0202 	orr.w	r2, r2, #2
 8002c9a:	60da      	str	r2, [r3, #12]
      break;
 8002c9c:	e01b      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0204 	orr.w	r2, r2, #4
 8002cac:	60da      	str	r2, [r3, #12]
      break;
 8002cae:	e012      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0208 	orr.w	r2, r2, #8
 8002cbe:	60da      	str	r2, [r3, #12]
      break;
 8002cc0:	e009      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0210 	orr.w	r2, r2, #16
 8002cd0:	60da      	str	r2, [r3, #12]
      break;
 8002cd2:	e000      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002cd4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 ffa9 	bl	8003c36 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_TIM_IC_Start_IT+0x200>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00e      	beq.n	8002d0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d009      	beq.n	8002d0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_TIM_IC_Start_IT+0x204>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_TIM_IC_Start_IT+0x208>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d111      	bne.n	8002d30 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d010      	beq.n	8002d40 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2e:	e007      	b.n	8002d40 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800

08002d58 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d841      	bhi.n	8002dec <HAL_TIM_IC_Stop_IT+0x94>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <HAL_TIM_IC_Stop_IT+0x18>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002ded 	.word	0x08002ded
 8002d78:	08002ded 	.word	0x08002ded
 8002d7c:	08002ded 	.word	0x08002ded
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002ded 	.word	0x08002ded
 8002d88:	08002ded 	.word	0x08002ded
 8002d8c:	08002ded 	.word	0x08002ded
 8002d90:	08002dc9 	.word	0x08002dc9
 8002d94:	08002ded 	.word	0x08002ded
 8002d98:	08002ded 	.word	0x08002ded
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002ddb 	.word	0x08002ddb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0202 	bic.w	r2, r2, #2
 8002db2:	60da      	str	r2, [r3, #12]
      break;
 8002db4:	e01b      	b.n	8002dee <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0204 	bic.w	r2, r2, #4
 8002dc4:	60da      	str	r2, [r3, #12]
      break;
 8002dc6:	e012      	b.n	8002dee <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0208 	bic.w	r2, r2, #8
 8002dd6:	60da      	str	r2, [r3, #12]
      break;
 8002dd8:	e009      	b.n	8002dee <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0210 	bic.w	r2, r2, #16
 8002de8:	60da      	str	r2, [r3, #12]
      break;
 8002dea:	e000      	b.n	8002dee <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8002dec:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ff1d 	bl	8003c36 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a1a      	ldr	r2, [r3, #32]
 8002e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <HAL_TIM_IC_Stop_IT+0xd4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	f240 4344 	movw	r3, #1092	; 0x444
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IC_Stop_IT+0xd4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_TIM_IC_Stop_IT+0xe4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3a:	e013      	b.n	8002e64 <HAL_TIM_IC_Stop_IT+0x10c>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d104      	bne.n	8002e4c <HAL_TIM_IC_Stop_IT+0xf4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4a:	e00b      	b.n	8002e64 <HAL_TIM_IC_Stop_IT+0x10c>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d104      	bne.n	8002e5c <HAL_TIM_IC_Stop_IT+0x104>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5a:	e003      	b.n	8002e64 <HAL_TIM_IC_Stop_IT+0x10c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_TIM_IC_Stop_IT+0x11c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e72:	e013      	b.n	8002e9c <HAL_TIM_IC_Stop_IT+0x144>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d104      	bne.n	8002e84 <HAL_TIM_IC_Stop_IT+0x12c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e82:	e00b      	b.n	8002e9c <HAL_TIM_IC_Stop_IT+0x144>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d104      	bne.n	8002e94 <HAL_TIM_IC_Stop_IT+0x13c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e92:	e003      	b.n	8002e9c <HAL_TIM_IC_Stop_IT+0x144>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop

08002ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0202 	mvn.w	r2, #2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fda4 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 faf6 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fafc 	bl	80034f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0204 	mvn.w	r2, #4
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fd7a 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 facc 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fad2 	bl	80034f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0208 	mvn.w	r2, #8
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fd50 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 faa2 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 faa8 	bl	80034f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0210 	mvn.w	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fd26 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa78 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa7e 	bl	80034f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10e      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0201 	mvn.w	r2, #1
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fdc4 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b80      	cmp	r3, #128	; 0x80
 8003038:	d10e      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fe7b 	bl	8003d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d10e      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d107      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa42 	bl	8003508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b20      	cmp	r3, #32
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0220 	mvn.w	r2, #32
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fe46 	bl	8003d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e082      	b.n	80031d8 <HAL_TIM_IC_ConfigChannel+0x120>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f000 fbfe 	bl	80038f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020c 	bic.w	r2, r2, #12
 8003102:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e05a      	b.n	80031ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d11c      	bne.n	8003158 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fc67 	bl	8003a00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003140:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	021a      	lsls	r2, r3, #8
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e03a      	b.n	80031ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11b      	bne.n	8003196 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f000 fcb2 	bl	8003ad6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020c 	bic.w	r2, r2, #12
 8003180:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
 8003194:	e01b      	b.n	80031ce <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f000 fcd1 	bl	8003b4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0ac      	b.n	8003354 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	f200 809f 	bhi.w	8003348 <HAL_TIM_PWM_ConfigChannel+0x168>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003245 	.word	0x08003245
 8003214:	08003349 	.word	0x08003349
 8003218:	08003349 	.word	0x08003349
 800321c:	08003349 	.word	0x08003349
 8003220:	08003285 	.word	0x08003285
 8003224:	08003349 	.word	0x08003349
 8003228:	08003349 	.word	0x08003349
 800322c:	08003349 	.word	0x08003349
 8003230:	080032c7 	.word	0x080032c7
 8003234:	08003349 	.word	0x08003349
 8003238:	08003349 	.word	0x08003349
 800323c:	08003349 	.word	0x08003349
 8003240:	08003307 	.word	0x08003307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f9c8 	bl	80035e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0208 	orr.w	r2, r2, #8
 800325e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6999      	ldr	r1, [r3, #24]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	619a      	str	r2, [r3, #24]
      break;
 8003282:	e062      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa0e 	bl	80036ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	021a      	lsls	r2, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
      break;
 80032c4:	e041      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fa57 	bl	8003780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0208 	orr.w	r2, r2, #8
 80032e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0204 	bic.w	r2, r2, #4
 80032f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69d9      	ldr	r1, [r3, #28]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	61da      	str	r2, [r3, #28]
      break;
 8003304:	e021      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 faa1 	bl	8003854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69d9      	ldr	r1, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
      break;
 8003346:	e000      	b.n	800334a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e0b3      	b.n	80034dc <HAL_TIM_ConfigClockSource+0x180>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d03e      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xd0>
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b2:	f200 8087 	bhi.w	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	f000 8085 	beq.w	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d87f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033c4:	2b70      	cmp	r3, #112	; 0x70
 80033c6:	d01a      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xa2>
 80033c8:	2b70      	cmp	r3, #112	; 0x70
 80033ca:	d87b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033cc:	2b60      	cmp	r3, #96	; 0x60
 80033ce:	d050      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x116>
 80033d0:	2b60      	cmp	r3, #96	; 0x60
 80033d2:	d877      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033d4:	2b50      	cmp	r3, #80	; 0x50
 80033d6:	d03c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xf6>
 80033d8:	2b50      	cmp	r3, #80	; 0x50
 80033da:	d873      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d058      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x136>
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d86f      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033e4:	2b30      	cmp	r3, #48	; 0x30
 80033e6:	d064      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x156>
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d86b      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d060      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x156>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d867      	bhi.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x156>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d05a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033fc:	e062      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f000 fbf3 	bl	8003bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	609a      	str	r2, [r3, #8]
      break;
 800342a:	e04e      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f000 fbdc 	bl	8003bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e03b      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	461a      	mov	r2, r3
 8003460:	f000 faa0 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2150      	movs	r1, #80	; 0x50
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fbaa 	bl	8003bc4 <TIM_ITRx_SetConfig>
      break;
 8003470:	e02b      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fafa 	bl	8003a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2160      	movs	r1, #96	; 0x60
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb9a 	bl	8003bc4 <TIM_ITRx_SetConfig>
      break;
 8003490:	e01b      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fa80 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb8a 	bl	8003bc4 <TIM_ITRx_SetConfig>
      break;
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fb81 	bl	8003bc4 <TIM_ITRx_SetConfig>
        break;
 80034c2:	e002      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
	...

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <TIM_Base_SetConfig+0xb8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x30>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x30>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a26      	ldr	r2, [pc, #152]	; (80035d8 <TIM_Base_SetConfig+0xbc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x30>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <TIM_Base_SetConfig+0xc0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <TIM_Base_SetConfig+0xb8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0x62>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <TIM_Base_SetConfig+0xbc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <TIM_Base_SetConfig+0xc0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <TIM_Base_SetConfig+0xb8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d103      	bne.n	80035c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	615a      	str	r2, [r3, #20]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800

080035e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0302 	bic.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10c      	bne.n	8003656 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0308 	bic.w	r3, r3, #8
 8003642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <TIM_OC1_SetConfig+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40012c00 	.word	0x40012c00

080036ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0210 	bic.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0320 	bic.w	r3, r3, #32
 80036f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <TIM_OC2_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <TIM_OC2_SetConfig+0xd0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d113      	bne.n	8003758 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00

08003780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <TIM_OC3_SetConfig+0xd0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10d      	bne.n	80037fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <TIM_OC3_SetConfig+0xd0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d113      	bne.n	800382a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00

08003854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800389e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <TIM_OC4_SetConfig+0x98>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d109      	bne.n	80038c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <TIM_TI1_SetConfig+0xa8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <TIM_TI1_SetConfig+0x46>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d007      	beq.n	8003936 <TIM_TI1_SetConfig+0x46>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <TIM_TI1_SetConfig+0xac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_TI1_SetConfig+0x46>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <TIM_TI1_SetConfig+0xb0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <TIM_TI1_SetConfig+0x4a>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <TIM_TI1_SetConfig+0x4c>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e003      	b.n	800395a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	b2db      	uxtb	r3, r3
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f023 030a 	bic.w	r3, r3, #10
 8003974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f003 030a 	and.w	r3, r3, #10
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f023 0210 	bic.w	r2, r3, #16
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	031b      	lsls	r3, r3, #12
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	031b      	lsls	r3, r3, #12
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f043 0307 	orr.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	609a      	str	r2, [r3, #8]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	021a      	lsls	r2, r3, #8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2201      	movs	r2, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	401a      	ands	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e046      	b.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10c      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e03f      	b.n	8003df2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fbc8 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fc85 	bl	80046b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08a      	sub	sp, #40	; 0x28
 8003dfe:	af02      	add	r7, sp, #8
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d17c      	bne.n	8003f14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_Transmit+0x2c>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e075      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_UART_Transmit+0x3e>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e06e      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2221      	movs	r2, #33	; 0x21
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e4e:	f7fd fc37 	bl	80016c0 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e8c:	e02a      	b.n	8003ee4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fa38 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e036      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1cf      	bne.n	8003e8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2140      	movs	r1, #64	; 0x40
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fa08 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d11d      	bne.n	8003f74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Receive_IT+0x26>
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e016      	b.n	8003f76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Receive_IT+0x38>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e00f      	b.n	8003f76 <HAL_UART_Receive_IT+0x58>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fa19 	bl	80043a2 <UART_Start_Receive_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fac9 	bl	8004562 <UART_Receive_IT>
      return;
 8003fd0:	e17b      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b1 	beq.w	800413c <HAL_UART_IRQHandler+0x1bc>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x70>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a6 	beq.w	800413c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f043 0202 	orr.w	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_UART_IRQHandler+0xee>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0208 	orr.w	r2, r3, #8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 811e 	beq.w	80042c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_UART_IRQHandler+0x11e>
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fa62 	bl	8004562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <HAL_UART_IRQHandler+0x146>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d031      	beq.n	800412a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9a4 	bl	8004414 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4a76      	ldr	r2, [pc, #472]	; (80042d0 <HAL_UART_IRQHandler+0x350>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fc54 	bl	80019ac <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00e      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8e3 	bl	80042e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00a      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8df 	bl	80042e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e006      	b.n	8004138 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8db 	bl	80042e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004136:	e0c3      	b.n	80042c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	bf00      	nop
    return;
 800413a:	e0c1      	b.n	80042c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 80a1 	bne.w	8004288 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 809b 	beq.w	8004288 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8095 	beq.w	8004288 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04e      	beq.n	8004220 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800418c:	8a3b      	ldrh	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8098 	beq.w	80042c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004198:	8a3a      	ldrh	r2, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	f080 8092 	bcs.w	80042c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8a3a      	ldrh	r2, [r7, #16]
 80041a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d02b      	beq.n	8004208 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0210 	bic.w	r2, r2, #16
 80041fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fb97 	bl	8001936 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004210:	b29b      	uxth	r3, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f86d 	bl	80042f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800421e:	e051      	b.n	80042c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d047      	beq.n	80042c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004238:	8a7b      	ldrh	r3, [r7, #18]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d044      	beq.n	80042c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800424c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800427c:	8a7b      	ldrh	r3, [r7, #18]
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f839 	bl	80042f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004286:	e01f      	b.n	80042c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_UART_IRQHandler+0x324>
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8f9 	bl	8004494 <UART_Transmit_IT>
    return;
 80042a2:	e012      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_UART_IRQHandler+0x34a>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f93a 	bl	8004532 <UART_EndTransmit_IT>
    return;
 80042be:	e004      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
    return;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
      return;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <HAL_UART_IRQHandler+0x34a>
      return;
 80042c8:	bf00      	nop
  }
}
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	0800446d 	.word	0x0800446d

080042d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431e:	e02c      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d028      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	f7fd f9c7 	bl	80016c0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	429a      	cmp	r2, r3
 800433c:	d21d      	bcs.n	800437a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800434c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e00f      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d0c3      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2222      	movs	r2, #34	; 0x22
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0220 	orr.w	r2, r2, #32
 8004406:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800442a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0210 	bic.w	r2, r2, #16
 8004452:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff ff2d 	bl	80042e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b21      	cmp	r3, #33	; 0x21
 80044a6:	d13e      	bne.n	8004526 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b0:	d114      	bne.n	80044dc <UART_Transmit_IT+0x48>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d110      	bne.n	80044dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]
 80044da:	e008      	b.n	80044ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6211      	str	r1, [r2, #32]
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4619      	mov	r1, r3
 80044fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff febe 	bl	80042d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b22      	cmp	r3, #34	; 0x22
 8004574:	f040 8099 	bne.w	80046aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d117      	bne.n	80045b2 <UART_Receive_IT+0x50>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
 80045b0:	e026      	b.n	8004600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d007      	beq.n	80045d6 <UART_Receive_IT+0x74>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <UART_Receive_IT+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e008      	b.n	80045f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004610:	2b00      	cmp	r3, #0
 8004612:	d148      	bne.n	80046a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d123      	bne.n	800469c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0210 	bic.w	r2, r2, #16
 8004668:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b10      	cmp	r3, #16
 8004676:	d10a      	bne.n	800468e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fe2f 	bl	80042f8 <HAL_UARTEx_RxEventCallback>
 800469a:	e002      	b.n	80046a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc fba3 	bl	8000de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e002      	b.n	80046ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ee:	f023 030c 	bic.w	r3, r3, #12
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_SetConfig+0x114>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7fd ffc2 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	e002      	b.n	800472a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fd ffaa 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	4a22      	ldr	r2, [pc, #136]	; (80047cc <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	0119      	lsls	r1, r3, #4
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <UART_SetConfig+0x118>)
 8004762:	fba3 0302 	umull	r0, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2064      	movs	r0, #100	; 0x64
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	; 0x32
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <UART_SetConfig+0x118>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004780:	4419      	add	r1, r3
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009a      	lsls	r2, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fbb2 f2f3 	udiv	r2, r2, r3
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <UART_SetConfig+0x118>)
 800479a:	fba3 0302 	umull	r0, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2064      	movs	r0, #100	; 0x64
 80047a2:	fb00 f303 	mul.w	r3, r0, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	3332      	adds	r3, #50	; 0x32
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <UART_SetConfig+0x118>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	440a      	add	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013800 	.word	0x40013800
 80047cc:	51eb851f 	.word	0x51eb851f

080047d0 <memset>:
 80047d0:	4603      	mov	r3, r0
 80047d2:	4402      	add	r2, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	2600      	movs	r6, #0
 80047e4:	4d0c      	ldr	r5, [pc, #48]	; (8004818 <__libc_init_array+0x38>)
 80047e6:	4c0d      	ldr	r4, [pc, #52]	; (800481c <__libc_init_array+0x3c>)
 80047e8:	1b64      	subs	r4, r4, r5
 80047ea:	10a4      	asrs	r4, r4, #2
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	f000 f81a 	bl	8004828 <_init>
 80047f4:	2600      	movs	r6, #0
 80047f6:	4d0a      	ldr	r5, [pc, #40]	; (8004820 <__libc_init_array+0x40>)
 80047f8:	4c0a      	ldr	r4, [pc, #40]	; (8004824 <__libc_init_array+0x44>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08004868 	.word	0x08004868
 800481c:	08004868 	.word	0x08004868
 8004820:	08004868 	.word	0x08004868
 8004824:	0800486c 	.word	0x0800486c

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
